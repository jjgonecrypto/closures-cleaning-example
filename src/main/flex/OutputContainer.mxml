<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" 
					creationComplete="onCrtComplete(event)">
	<fx:Script>
		<![CDATA[
			import mx.core.mx_internal;
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import org.justinjmoses.examples.closures.IDisposable;
			import org.justinjmoses.examples.closures.IDoesSomething;
			import org.justinjmoses.examples.closures.IDoesSomethingWithSignals;
			import org.justinjmoses.examples.closures.events.SomethingEvent;
			import org.osflash.signals.ISignal;
			import org.osflash.signals.ISignalBinding;
			
			private const collection:ArrayCollection = new ArrayCollection();
			private const rows:int = 100;
			
			private var listeners:Object = {};
			private var signals:Vector.<ISignalBinding> = new <ISignalBinding>[];
			
			protected function onCrtComplete(event:FlexEvent):void
			{
				list.dataProvider = collection;
			}
			
			/**
			 * Using events.
			 */
			public function set type(somethingType:Class):void
			{
				empty();
				
				for (var i:int = 0; i < rows; i++)
				{ 
					var doer:IDoesSomething = new somethingType() as IDoesSomething;
					
					prepareItem(doer, i);
					
					doer.addEventListener(SomethingEvent.SOMETHING_HAPPENED, handleSomething); 
					
					doer.doSomething(i);
				} 
			}
			
			//reference this at the class level so we can remove it easily if switching types
			private function handleSomething(evt:SomethingEvent):void
			{
				updateItem(evt.index);	
				const doer:* = collection.getItemAt(evt.index)["doer"];
				if (doer) doer.removeEventListener(SomethingEvent.SOMETHING_HAPPENED, arguments.callee);
			}
			
			/**
			 * Using signals.
			 */
			public function set signalType(somethingType:Class):void
			{
				empty();
				
				for (var i:int = 0; i < rows; i++)
				{ 
					var doer:IDoesSomethingWithSignals = new somethingType() as IDoesSomethingWithSignals;
					prepareItem(doer, i);
					
					const signal:ISignal = doer.doSomething(i);
					
					const binding:ISignalBinding = signal.addOnce(function(index:int):void
					{
						updateItem(index);
					});
					
					signals.push(binding);
				}
			}
			
			protected function empty():void
			{
				signals.forEach(function(binding:ISignalBinding, ... args):void
				{
					binding.remove();
				});
				collection.source.forEach(function(item:*, ... args):void
				{
					if (item["doer"] is IEventDispatcher)
					{
						const doer:IEventDispatcher = item["doer"] as IEventDispatcher; 
						doer.removeEventListener(SomethingEvent.SOMETHING_HAPPENED, handleSomething);
					}
				});
				collection.removeAll(); 
			}

			protected function prepareItem(doer:*, index:int):void
			{
				const data:Object = {};
				data["index"] = index;
				data["status"] = ".";
				data["doer"] = doer;
				collection.addItemAt(data, index);
			}
			
			protected function updateItem(index:int):void
			{
				const doer:* = collection.getItemAt(index)["doer"];
				
				if (!doer) return;
				
				if (doer is IDisposable)
				{
					(doer as IDisposable).dispose();
				}
				
				collection.getItemAt(index)["status"] = "OK";
				collection.refresh();
			}
			
			protected function updateMemory():void
			{
				System.gc();
				lblMemory.text = (System.totalMemory / Math.pow(1024,2)).toFixed(3) + "MB";
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" verticalAlign="middle" />
	</s:layout>
	
	<s:HGroup verticalAlign="middle">
		<s:Label text="Memory Usage:" />
		<s:Label id="lblMemory" />
		<s:Button label="Force GC" click="updateMemory()" />
	</s:HGroup>
	
	<s:List id="list" width="90%" height="90%">
		<s:layout>
			<s:TileLayout />
		</s:layout>
		<s:itemRenderer>
			<fx:Component>
				<s:ItemRenderer>
					<fx:Script>
						<![CDATA[
							override public function set data(value:Object):void
							{
								lblIndex.text = value.index;
								lblStatus.text = value.status;
							}
						]]>
					</fx:Script>
					<s:layout>
						<s:HorizontalLayout />
					</s:layout>
					<s:Label id="lblIndex" />
					<s:Label id="lblStatus" color="green" />
				</s:ItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
	
</s:Group>
